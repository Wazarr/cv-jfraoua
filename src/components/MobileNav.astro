---
const currentPath = Astro.url.pathname;

const navItems = [
  { href: '/', label: 'home', icon: '/', color: 'terminal' },
  { href: '/chat', label: 'chat ðŸ¤–', icon: '/', color: 'primary', special: true },
  { href: '/resume', label: 'resume', icon: '/', color: 'code' },
  { href: '/projects', label: 'projects', icon: '/', color: 'primary' },
  { href: '/blog', label: 'blog', icon: '/', color: 'light' }
];

const currentItem = navItems.find(item => item.href === currentPath);
---

<div class="relative">
  <!-- Mobile Navigation Button -->
  <button
    id="mobile-nav-button"
    class="w-full bg-light-200 dark:bg-dark-800 border border-light-300 dark:border-dark-600 rounded-lg px-4 py-3 text-left flex items-center justify-between transition-all duration-200 hover:border-primary-500 focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500/20"
  >
    <div class="flex items-center space-x-3">
      <span class="text-{currentItem?.color || 'terminal'}-400 font-mono text-sm">
        {currentItem?.icon}{currentItem?.label || 'navigate'}
      </span>
    </div>
    <div class="flex items-center space-x-2">
      <div class="w-2 h-2 bg-terminal-500 rounded-full animate-pulse"></div>
      <svg 
        id="mobile-nav-arrow"
        class="w-4 h-4 text-light-600 dark:text-dark-400 transition-transform duration-200" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>
  </button>

  <!-- Dropdown Menu -->
  <div
    id="mobile-nav-dropdown"
    class="absolute top-full left-0 right-0 mt-2 bg-light-100 dark:bg-dark-800 border border-light-300 dark:border-dark-600 rounded-lg shadow-xl backdrop-blur-sm z-50 opacity-0 invisible transform scale-95 transition-all duration-200"
  >
    <div class="p-2">
      {navItems.map((item) => (
        <a
          href={item.href}
          class={`
            block w-full text-left px-4 py-3 rounded-md text-sm font-mono transition-all duration-150 group
            ${item.special ? 'bg-gradient-to-r from-primary-500/20 to-code-500/20 border border-primary-300 dark:border-primary-600' : ''}
            ${currentPath === item.href 
              ? `bg-${item.color}-500/10 text-${item.color}-400 border-l-2 border-${item.color}-400` 
              : item.special 
                ? 'text-primary-600 dark:text-primary-400 hover:bg-primary-500/30' 
                : 'text-light-700 dark:text-dark-300 hover:bg-light-200 dark:hover:bg-dark-700 hover:text-primary-400'
            }
          `}
        >
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-3">
              <span class={`text-${item.color}-400 transition-colors`}>
                {item.icon}
              </span>
              <span class="group-hover:translate-x-1 transition-transform duration-150">
                {item.label}
              </span>
              {item.special && (
                <span class="text-xs bg-primary-500 text-white px-1.5 py-0.5 rounded-full">AI</span>
              )}
            </div>
            {currentPath === item.href && (
              <div class="flex space-x-1">
                <div class="w-1.5 h-1.5 bg-terminal-400 rounded-full animate-pulse"></div>
                <div class="w-1.5 h-1.5 bg-primary-400 rounded-full animate-pulse animation-delay-75"></div>
              </div>
            )}
          </div>
        </a>
      ))}
    </div>
    
    <!-- Terminal-style footer -->
    <div class="border-t border-light-300 dark:border-dark-600 px-4 py-2">
      <div class="flex items-center justify-center space-x-2 text-xs">
        <span class="text-terminal-400 font-mono">jeremy@portfolio:~$</span>
        <span class="text-light-500 dark:text-dark-500">navigate</span>
      </div>
    </div>
  </div>
</div>

<script>
  function setupMobileNav() {
    const button = document.getElementById('mobile-nav-button');
    const dropdown = document.getElementById('mobile-nav-dropdown');
    const arrow = document.getElementById('mobile-nav-arrow');
    
    if (!button || !dropdown || !arrow) return;
    
    let isOpen = false;
    
    function toggleDropdown() {
      if (!dropdown || !arrow) return;
      isOpen = !isOpen;
      
      if (isOpen) {
        dropdown.classList.remove('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.add('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(180deg)';
      } else {
        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(0deg)';
      }
    }
    
    function closeDropdown() {
      if (!dropdown || !arrow) return;
      if (isOpen) {
        isOpen = false;
        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(0deg)';
      }
    }
    
    // Toggle on button click
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    
    // Close on outside click
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      if (!button.contains(target) && !dropdown.contains(target)) {
        closeDropdown();
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });
    
    // Handle navigation
    const navLinks = dropdown.querySelectorAll('a[href]');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        closeDropdown();
      });
    });
  }

  // Initial setup
  document.addEventListener('DOMContentLoaded', setupMobileNav);
  
  // Handle Astro page transitions
  document.addEventListener('astro:after-swap', setupMobileNav);
</script>

<style>
  .animation-delay-75 {
    animation-delay: 0.075s;
  }
  
  /* Fix for dynamic Tailwind classes */
  .text-terminal-400 { color: rgb(34 197 94); }
  .text-code-400 { color: rgb(96 165 250); }
  .text-primary-400 { color: rgb(251 146 60); }
  .text-light-400 { color: rgb(206 212 218); }
  
  .bg-terminal-500\/10 { background-color: rgb(34 197 94 / 0.1); }
  .bg-code-500\/10 { background-color: rgb(59 130 246 / 0.1); }
  .bg-primary-500\/10 { background-color: rgb(247 147 26 / 0.1); }
  .bg-light-500\/10 { background-color: rgb(173 181 189 / 0.1); }
  
  .border-terminal-400 { border-color: rgb(34 197 94); }
  .border-code-400 { border-color: rgb(96 165 250); }
  .border-primary-400 { border-color: rgb(251 146 60); }
  .border-light-400 { border-color: rgb(206 212 218); }
</style>